
#ifndef PRJ_CREATOR_FILE_CONTENTS_HPP
#define PRJ_CREATOR_FILE_CONTENTS_HPP

#include <string>

namespace scripts {

    const static std::string script_run_sh{"#! /bin/bash\n"
                                           "\n"
                                           "nice -n 20 clear\n"
                                           "\n"
                                           "if [ $1 -eq 0 ]; then\n"
                                           "    nice -n 20 ls -ltrha bin/result.out\n"
                                           "    nice -n 20 echo \"\"\n"
                                           "    nice -n 20 echo \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\"\n"
                                           "    nice -n 20 echo \"\"\n"
                                           "    nice -n 20 bin/result.out\n"
                                           "    nice -n 20 echo \"\"\n"
                                           "    nice -n 20 echo \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\"\n"
                                           "else\n"
                                           "    nice -n 20 rm -rf bin/*.o\n"
                                           "    nice -n 20 rm -rf bin/*.out\n"
                                           "    nice -n 20 rm -rf bin/result*\n"
                                           "    nice -n 20 rm -rf bin/main*\n"
                                           "    nice -n 20 clear\n"
                                           "    ./compiler.sh $1\n"
                                           "    nice -n 20 echo \"\"\n"
                                           "    nice -n 20 echo \"\"\n"
                                           "    nice -n 20 echo \"PRESS ANY KEY TO EXECUTE PROGRAM ...\"\n"
                                           "    #read\n"
                                           "    nice -n 20 ls -ltrha bin/result.out\n"
                                           "    nice -n 20 echo \"\"\n"
                                           "    nice -n 20 echo \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\"\n"
                                           "    nice -n 20 echo \"\"\n"
                                           "    nice -n 20 bin/result.out\n"
                                           "    nice -n 20 echo \"\"\n"
                                           "    nice -n 20 echo \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\"\n"
                                           "fi"};

    const static std::string script_new_sh{"#! /bin/bash\n"
                                           "\n"
                                           "echo \"#include <iostream>\" >> src/app/main_$1.cpp\n"
                                           "echo \"\" >>  src/app/main_$1.cpp\n"
                                           "echo \"#define END_LINE  '\\n'\" >> src/app/main_$1.cpp\n"
                                           "echo \"\" >> src/app/main_$1.cpp\n"
                                           "echo \"int main() {\" >> src/app/main_$1.cpp\n"
                                           "echo \"\" >> src/app/main_$1.cpp\n"
                                           "echo \"\" >> src/app/main_$1.cpp\n"
                                           "echo \"\" >> src/app/main_$1.cpp\n"
                                           "echo \"\" >> src/app/main_$1.cpp\n"
                                           "echo \"    std::cout << \\\"\\nThe End ...\\\" << std::endl;\" >> src/app/main_$1.cpp\n"
                                           "echo \"    return EXIT_SUCCESS;\" >> src/app/main_$1.cpp\n"
                                           "echo \"}\" >> src/app/main_$1.cpp\n"
                                           "code src/app/main_$1.cpp"};

    const static std::string script_compiler_sh{"#! /bin/bash\n"
                                                "\n"
                                                "nice -n 20 g++ -std=c++23 -g3 -fgnu-tm -pthread -lpthread -fconcepts -pedantic -pedantic-errors -Wall -Wextra -Wconversion -Wcast-align -Wcast-qual -Wctor-dtor-privacy -Wdisabled-optimization -Wlogical-op -Wmissing-declarations -Wmissing-include-dirs -Wnoexcept -Wold-style-cast -Woverloaded-virtual -Wredundant-decls -Wshadow -Wsign-conversion -Wsign-promo -Wstrict-null-sentinel -Wswitch-default -Wundef -Weffc++ -Wfloat-equal -fmessage-length=0 -v -fPIC -fPIE -m64 -march=corei7-avx src/app/main_$1.cpp -o bin/result.out\n"};

    const static std::string script_compiler_postgres_sh{
            "nice -n 20 g++ -std=c++23 -g3 -fgnu-tm -pthread -lpthread -fconcepts -pedantic -pedantic-errors -Wall -Wextra -Wconversion -Wcast-align -Wcast-qual -Wctor-dtor-privacy -Wdisabled-optimization -Wlogical-op -Wmissing-declarations -Wmissing-include-dirs -Wnoexcept -Wold-style-cast -Woverloaded-virtual -Wredundant-decls -Wshadow -Wsign-conversion -Wsign-promo -Wstrict-null-sentinel -Wswitch-default -Wundef -Weffc++ -Wfloat-equal -fmessage-length=0 -v -fPIC -fPIE -m64 -march=corei7-avx src/app/main_$1.cpp -lpqxx -lpq -o bin/result.out"};

    const static std::string script_main_cpp{"#include <iostream>\n"
                                             "\n"
                                             "int main() {\n"
                                             "\n"
                                             "    std::cout << \"\\nThe End ...\" << std::endl;\n"
                                             "    return EXIT_SUCCESS;\n"
                                             "}"};

    const static std::string script_main_001_cpp{"#include <iostream>\n"
                                                 "\n"
                                                 "int main() {\n"
                                                 "\n"
                                                 "    std::cout << \"\\nThe End ...\" << std::endl;\n"
                                                 "    return EXIT_SUCCESS;\n"
                                                 "}"};


    const static std::string script_cmake_txt{"cmake_minimum_required(VERSION 3.5)\n"
                                              "\n"
                                              "set(CMAKE_PROJECT_NAME %s)\n"
                                              "set(CMAKE_PROJECT_VERSION 1)\n"
                                              "set(CMAKE_PROJECT_VERSION_MAJOR 0)\n"
                                              "set(CMAKE_PROJECT_VERSION_MINOR 1)\n"
                                              "set(CMAKE_PROJECT_DESCRIPTION \"training C++\")\n"
                                              "\n"
                                              "project (\n"
                                              "        ${CMAKE_PROJECT_NAME}\n"
                                              "        VERSION ${CMAKE_PROJECT_VERSION_MAJOR}.${CMAKE_PROJECT_VERSION_MINOR}\n"
                                              "        LANGUAGES CXX\n"
                                              "        DESCRIPTION ${CMAKE_PROJECT_DESCRIPTION})\n"
                                              "\n"
                                              "set(CMAKE_CXX_STANDARD 23)\n"
                                              "set(CMAKE_CXX_STANDARD_DEFAULT 23)\n"
                                              "set(CMAKE_CXX_STANDARD_REQUIRED ON)\n"
                                              "set(CMAKE_INCLUDE_CURRENT_DIR ON)\n"
                                              "\n"
                                              "set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=gnu++23 -O0 -g3 -pthread -lpthread\")\n"
                                              "set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -pedantic -Wall -Wextra -Wconversion \")\n"
                                              "set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wcast-align -Wcast-qual -Wdisabled-optimization \")\n"
                                              "set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wlogical-op -Wmissing-declarations \")\n"
                                              "set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wmissing-include-dirs -Wredundant-decls \")\n"
                                              "set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wshadow -Wsign-conversion -Wswitch-default \")\n"
                                              "set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wundef -Wfloat-equal -fmessage-length=0 \")\n"
                                              "set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -v -fPIC -fPIE -m64 -march=corei7-avx  \")\n"
                                              "\n"
                                              "add_executable(${CMAKE_PROJECT_NAME} src/app/main.cpp)\n"
                                              "\n"
                                              "target_include_directories(${CMAKE_PROJECT_NAME} PUBLIC \"${PROJECT_BINARY_DIR}\")"};

    const static std::string script_cmake_postgres_txt{"cmake_minimum_required(VERSION 3.5)\n"
                                                       "\n"
                                                       "set(CMAKE_PROJECT_NAME postgresql_002)\n"
                                                       "set(CMAKE_PROJECT_VERSION 1)\n"
                                                       "set(CMAKE_PROJECT_VERSION_MAJOR 0)\n"
                                                       "set(CMAKE_PROJECT_VERSION_MINOR 1)\n"
                                                       "set(CMAKE_PROJECT_DESCRIPTION \"training C++\")\n"
                                                       "\n"
                                                       "project (\n"
                                                       "        ${CMAKE_PROJECT_NAME}\n"
                                                       "        VERSION ${CMAKE_PROJECT_VERSION_MAJOR}.${CMAKE_PROJECT_VERSION_MINOR}\n"
                                                       "        LANGUAGES CXX\n"
                                                       "        DESCRIPTION ${CMAKE_PROJECT_DESCRIPTION})\n"
                                                       "\n"
                                                       "set(CMAKE_CXX_STANDARD 23)\n"
                                                       "set(CMAKE_CXX_STANDARD_DEFAULT 23)\n"
                                                       "set(CMAKE_CXX_STANDARD_REQUIRED ON)\n"
                                                       "set(CMAKE_INCLUDE_CURRENT_DIR ON)\n"
                                                       "\n"
                                                       "set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=gnu++23 -O0 -g3 -pthread -lpthread -latomic\")\n"
                                                       "set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -pedantic -Wall -Wextra -Wconversion \")\n"
                                                       "set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wcast-align -Wcast-qual -Wdisabled-optimization \")\n"
                                                       "set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wlogical-op -Wmissing-declarations \")\n"
                                                       "set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wmissing-include-dirs -Wredundant-decls \")\n"
                                                       "set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wshadow -Wsign-conversion -Wswitch-default \")\n"
                                                       "set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wundef -Wfloat-equal -fmessage-length=0 \")\n"
                                                       "set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -v -fPIC -fPIE -m64 -march=corei7-avx  \")\n"
                                                       "\n"
                                                       "add_executable(${CMAKE_PROJECT_NAME} src/app/main.cpp\n"
                                                       "\tsrc/header/dbconnect2.h\n"
                                                       "\tsrc/header/dbconnect2.cpp\n"
                                                       ")\n"
                                                       "\n"
                                                       "add_library(LibsModule src/app/main.cpp)\n"
                                                       "\n"
                                                       "set(PQXX /usr/local/include/pqxx)\n"
                                                       "find_library(PQXX_LIB pqxx)\n"
                                                       "find_library(PQ_LIB pq)\n"
                                                       "TARGET_LINK_LIBRARIES(${CMAKE_PROJECT_NAME} ${PQXX_LIB} ${PQ_LIB})\n"
                                                       "\n"
                                                       "\n"
                                                       "target_include_directories(${CMAKE_PROJECT_NAME} PUBLIC \"${PROJECT_BINARY_DIR}\")"};

    const static std::string script_cmake_sh{"#! /bin/bash\n"
                                             "\n"
                                             "if [ $1 -eq 0 ]; then\n"
                                             "    nice -n 20 ./build/%s\n"
                                             "else\n"
                                             "  nice -n 20 cmake -B build -S .\n"
                                             "  nice -n 20 cmake --build build --config debug --clean-first\n"
                                             "  nice -n 20 echo \"\"\n"
                                             "  nice -n 20 echo \"\"\n"
                                             "  nice -n 20 echo \"PRESS ANY KEY TO EXECUTE PROGRAM ...\"\n"
                                             "  read\n"
                                             "  nice -n 20 ls -lthra ./build/%s\n"
                                             "  nice -n 20 echo \"\"\n"
                                             "  nice -n 20 echo \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\"\n"
                                             "  nice -n 20 echo \"\"\n"
                                             "  nice -n 20 ./build/%s\n"
                                             "  nice -n 20 echo \"\"\n"
                                             "  nice -n 20 echo \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\"\n"
                                             "fi"};
}
#endif //PRJ_CREATOR_FILE_CONTENTS_HPP
